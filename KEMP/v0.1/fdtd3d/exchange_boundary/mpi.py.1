import numpy as np
from kemp.fdtd3d import gpu, cpu
from mpi4py import MPI
comm = MPI.COMM_WORLD
rank = comm.Get_rank()
size = comm.Get_size()


def get_pts_for_boundary(axis, nx, ny, nz):
	pt0 = {
			'x': {'-':(0, 0, 0), '+':(nx-1, 0, 0)},
			'y': {'-':(0, 0, 0), '+':(0, ny-1, 0)},
			'z': {'-':(0, 0, 0), '+':(0, 0, nz-1)} }[axis]
	pt1 = {
			'x': {'-':(0, ny-1, nz-1), '+':(nx-1, ny-1, nz-1)},
			'y': {'-':(nx-1, 0, nz-1), '+':(nx-1, ny-1, nz-1)},
			'z': {'-':(nx-1, ny-1, 0), '+':(nx-1, ny-1, nz-1)} }[axis]

	return pt0, pt1



class ExchangeInternal:
	def __init__(s, node_list, axis):
		emf_list = fields_list

		e_strfs = {'x':['ey','ez'], 'y':['ex','ez'], 'z':['ex','ey']}[axis]
		h_strfs = {'x':['hy','hz'], 'y':['hx','hz'], 'z':['hx','hy']}[axis]
		pts = [get_pts_for_boundary(axis, *emf.ns) for emf in emf_list]

		s.e_getfs, s.h_getfs = [], []
		s.e_setfs, s.h_setfs = [], []
		s.gpu, s.cpu = gpu, cpu

		for emf, (pt0, pt1) in zip(emf_list, pts)[1:]:
			s.e_getfs.append( getattr(s, emf.device_type).GetFields(emf, e_strfs, pt0['-'], pt1['-']) )
			s.h_setfs.append( getattr(s, emf.device_type).SetFields(emf, h_strfs, pt0['-'], pt1['-'], np.ndarray) )

		for emf, (pt0, pt1) in zip(emf_list, pts)[:-1]:
			s.h_getfs.append( getattr(s, emf.device_type).GetFields(emf, h_strfs, pt0['+'], pt1['+']) )
			s.e_setfs.append( getattr(s, emf.device_type).SetFields(emf, e_strfs, pt0['+'], pt1['+'], np.ndarray) )



	s.update = s.update_e_head	
	s.update = s.update_e_body	
	s.update = s.update_e_tail	


	def update_e_head(s):
		s.recv.Start()
		s.recv.Wait()
		s.setf.set_fields(s.e_fhost_recv)


	def update_e_body(s):
		s.e_recv.Start()
		s.e_getf.get_event().wait()
		s.e_send.Start()

		s.e_recv.Wait()
		s.e_setf.set_fields(s.e_fhost_recv)
		s.e_send.Wait()

	def update_e_body(s):
		f_list = [s.e_recv.Start, s.e_getf.get_event().wait, s.e_send.Start]
		arg_list = [(), (), ()]
		ff = zip(f_list, arg_list)
		for f, arg in ff:
			f(*arg)

		s.e_recv.Wait()
		s.e_setf.set_fields(s.e_fhost_recv)
		s.e_send.Wait()


		start_list = []
		wait_list = []

		[s.e_recv.Start], # recv
		[s.e_getf.get_event().wait, s.e_send.Start], # send

		[s.e_recv.Wait, s.e_setf.set_fields], # recv
		[s.e_send.Wait]

		] # send

		if 'r' in sr:
			start_list.append(  )
			wait_list.append( )
		if 's' in sr:
			start_list.append(  )
			wait_list.append( )

		
			f_list.insert(-1, ff_list[1])
			f_list = f_list + [ff_list[3]]
		fin_f_list = f_list[0,1,2,3]
			

		elif I = recv:
			f_list = ff_list[0] + ff_list[2]
		else:
			f_list = ff_list[0]+ ff_list[1]+ ff_list[2]+ ff_list[3]


		"""
		s.e_recv.Start()
		#s.e_getf.get_event().wait()
		#s.e_send.Start()

		s.e_recv.Wait()
		s.e_setf.set_fields(s.e_fhost_recv)
		#s.e_send.Wait()
		"""

	def update_e_tail(s):
		s.e_getf.get_event().wait()
		s.e_send.Start()
		s.e_send.Wait()









	def update_h_head(s):
		s.h_getf.get_event().wait()
		s.h_send.Start()
		s.h_send.Wait()


	def update_h(s):
		s.h_recv.Start()
		s.h_getf.get_event().wait()
		s.h_send.Start()

		s.h_recv.Wait()
		s.h_setf.set_fields(s.h_fhost_recv)
		s.h_send.Wait()




	neighbor_ranks = {}
	directions = ['x-', 'x+', 'y-', 'y+', 'z-', 'z+']
	for direction in directions:
		target = neighbor_ranks[direction]
		if type(target) == int:
			e_func_list.append(
		else:
			pass




mpi_shape = (2,3,1)
pbc = 'x'
rank0_is_node = 'False'

class Node(MultiGpuCpu):
	if rank == 0:
		s.e_func_list = []
	else:
		s.e_func_list =

	def update_e(s):
		for e_func in e_func_list:
	

class ExchangeMpi:
	def __init__(s, fdtds, nx, ny, nz):
		cuse = fdtds[-1].coeff_use
		s.b_fdtds = {}
		s.b_fdtds['x+'] = fdtds[-1]
		s.b_fdtds['x-'] = cpu.Fields(3, ny, nz, cuse, 1)
		s.b_fdtds['y+'] = cpu.Fields(3, nx, nz, cuse, 1)
		s.b_fdtds['y-'] = cpu.Fields(3, nx, nz, cuse, 1)
		s.b_fdtds['z+'] = cpu.Fields(3, nx, ny, cuse, 1)
		s.b_fdtds['z-'] = cpu.Fields(3, nx, ny, cuse, 1)


	def update_e(s):
	def update_h(s):
