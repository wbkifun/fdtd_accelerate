__kernel void update_e(int nx, int ny, int nz, __global DTYPE *ex, __global DTYPE *ey, __global DTYPE *ez, __global const DTYPE *hx, __global const DTYPE *hy, __global const DTYPE *hz ARGS_CE) {
	const int tx = get_local_id(0);
	int idx = get_global_id(0);
	int i,j,k;
	
	__local DTYPE sx[DX+1], sy[DX+1], sz[DX];

	while( idx < nx*ny*nz ) {
		sz[tx] = hz[idx];
		sy[tx] = hy[idx];
		sx[tx] = hx[idx];
		if( tx == DX-1 ) {
			sy[tx+1] = hy[idx+1];
			sx[tx+1] = hx[idx+1];
		}
		barrier(CLK_LOCAL_MEM_FENCE);

		i = idx/(ny*nz);
		j = (idx - i*ny*nz)/nz;
		k = idx%nz;

		if( j<ny-1 && k<nz-1 ) ex[idx] += CEX*( hz[idx+nz] - sz[tx] - sy[tx+1] + sy[tx] );
		if( i<nx-1 && k<nz-1 ) ey[idx] += CEY*( sx[tx+1] - sx[tx] - hz[idx+ny*nz] + sz[tx] );
		if( i<nx-1 && j<ny-1 ) ez[idx] += CEZ*( hy[idx+ny*nz] - sy[tx] - hx[idx+nz] + sx[tx] );

		idx += get_global_size(0);
	}
}



__kernel void update_h(int nx, int ny, int nz, __global const DTYPE *ex, __global const DTYPE *ey, __global const DTYPE *ez, __global DTYPE *hx, __global DTYPE *hy, __global DTYPE *hz ARGS_CH) {
	const int tx = get_local_id(0);
	int idx = get_global_id(0);
	int i,j,k;

	__local DTYPE s[3*DX+2];
	__local DTYPE *sx, *sy, *sz;
	sz = s;
	sy = &sz[DX+1];
	sx = &sy[DX+1];

	while( idx < nx*ny*nz ) {
		sz[tx] = ez[idx];
		sy[tx] = ey[idx];
		sx[tx] = ex[idx];
		if( tx == 0 ) {
			sy[tx-1] = ey[idx-1];
			sx[tx-1] = ex[idx-1];
		}
		barrier(CLK_LOCAL_MEM_FENCE);

		i = idx/(ny*nz);
		j = (idx - i*ny*nz)/nz;
		k = idx%nz;

		if( j>0 && k>0 ) hx[idx] -= 0.5*( sz[tx] - ez[idx-nz] - sy[tx] + sy[tx-1] );
		if( i>0 && k>0 ) hy[idx] -= 0.5*( sx[tx] - sx[tx-1] - sz[tx] + ez[idx-ny*nz] );
		if( i>0 && j>0 ) hz[idx] -= 0.5*( sy[tx] - ey[idx-ny*nz] - sx[tx] + ex[idx-nz] );

		idx += get_global_size(0);
	}
}
