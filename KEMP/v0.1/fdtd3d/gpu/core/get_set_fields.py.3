import numpy as np
import pyopencl as cl
from kemp.fdtd3d import common, common_gpu


def get_replace_list(pt0, pt1):
	x0, y0, z0 = pt0
	x1, y1, z1 = pt1

	macros = ['NMAX', 'XID', 'YID', 'ZID']
	nmax = str( (abs(x1-x0)+1) * (abs(y1-y0)+1) * (abs(z1-z0)+1) )
	vals = [nmax, str(x0), str(y0), str(z0)]

	if x0 == x1 and y0 == y1 and z0 == z1:
		axes = 'z'
		shape = (1,)

	elif x0 != x1 and y0 == y1 and z0 == z1:
		snx = abs(x1-x0) + 1
		vals[1] = '(gid + %d)' % x0
		axes = 'x'
		shape = (snx,)

	elif x0 == x1 and y0 != y1 and z0 == z1:
		sny = abs(y1-y0) + 1
		vals[2] = '(gid + %d)' % y0
		axes = 'y'
		shape = (sny,)

	elif x0 == x1 and y0 == y1 and z0 != z1:
		snz = abs(z1-z0) + 1
		vals[3] = '(gid + %d)' % z0
		axes = 'z'
		shape = (snz,)

	elif x0 != x1 and y0 != y1 and z0 == z1:
		snx = abs(x1-x0) + 1
		sny = abs(y1-y0) + 1
		vals[1] = '(gid/%d + %d)' % (sny, x0)
		vals[2] = '(gid%%%d + %d)' % (sny, y0)
		axes = 'xy'
		shape = (snx, sny)

	elif x0 == x1 and y0 != y1 and z0 != z1:
		sny = abs(y1-y0) + 1
		snz = abs(z1-z0) + 1
		vals[2] = '(gid/%d + %d)' % (snz, y0)
		vals[3] = '(gid%%%d + %d)' % (snz, z0)
		axes = 'yz'
		shape = (sny, snz)

	elif x0 != x1 and y0 == y1 and z0 != z1:
		snx = abs(x1-x0) + 1
		snz = abs(z1-z0) + 1
		vals[1] = '(gid/%d + %d)' % (snz, x0)
		vals[3] = '(gid%%%d + %d)' % (snz, z0)
		axes = 'xz'
		shape = (snx, snz)

	elif x0 != x1 and y0 != y1 and z0 != z1:
		snx = abs(x1-x0) + 1
		sny = abs(y1-y0) + 1
		snz = abs(z1-z0) + 1
		vals[1] = '(gid/%d + %d)' % (sny*snz, x0)
		vals[2] = '((gid/%d)%%%d + %d)' % (snz, sny, y0)
		vals[3] = '(gid%%%d + %d)' % (snz, z0)
		axes = 'xyz'
		shape = (snx, sny, snz)

	return {'macros':macros, 'vals':vals, 'axes':axes, 'shape':shape}




class GetFields:
	def __init__(s, fields, str_fs, pt0, pt1):
		s.emf = fields
		if type(str_fs) == str:
			s.str_fs = [str_fs,]
		else:
			s.str_fs = str_fs

		s.f_size = len(s.str_fs)

		# program
		s.rplist = get_replace_list(pt0, pt1)
		macros, vals = s.rplist['macros'], s.rplist['vals']
		macros += ['ARGS', 'TARGET', 'SOURCE']
		vals += ['__global float *source', 'target[idx2]', 'source[idx1]']
		ksrc = common.replace_template_code(open(common_gpu.src_path + 'subdomain.cl').read(), macros, vals)
		s.program = cl.Program(s.emf.context, ksrc).build()

		# allocation
		s.fs = [s.emf.get_buffer(sf) for sf in s.str_fs]
		s.shifts = [0] + [s.rplist['vals'][0] for sf in s.str_fs[1:]]
		shape = list( s.rplist['shape'] )
		shape[0] *= s.f_size

		s.fhost = np.zeros(shape, dtype=s.emf.dtype)
		mflags = cl.mem_flags.READ_WRITE | cl.mem_flags.COPY_HOST_PTR
		s.fgpu = cl.Buffer(s.emf.context, mflags, hostbuf=s.fhost)


	def get_event(s):
		for f, shift in zip(s.fs, s.shifts):		
			s.program.subdomain(s.emf.queue, (s.emf.gs,), (s.emf.ls,), *(s.emf.ns + [np.int32(shift), s.fgpu, f]) )

		return cl.enqueue_read_buffer(s.emf.queue, s.fgpu, s.fhost, is_blocking=False)


	def get_fields(s, str_f=None):
		if str_f == None:
			return s.fhost
		else:
			return dict( zip(s.str_fs, np.array_split(s.fhost, s.f_size)) )[str_f]




class SetFields:
	def __init__(s, fields, str_fs, pt0, pt1, dtype_values=None, wait_event=False):
		s.emf = fields
		if type(str_fs) == str:
			s.str_fs = [str_fs,]
		else:
			s.str_fs = str_fs

		s.dtype_values = dtype_values
		s.f_size = len(s.str_fs)

		# program
		s.rplist = get_replace_list(pt0, pt1)
		macros, vals = s.rplist['macros'], s.rplist['vals']
		macros += ['ARGS', 'TARGET', 'SOURCE']
		if s.dtype_values == np.ndarray:
			vals += ['__global float *source', 'target[idx1]', 'source[idx2]']
		else:
			vals += ['float source', 'target[idx1]', 'source']
		ksrc = common.replace_template_code(open(common_gpu.src_path + '/subdomain.cl').read(), macros, vals)
		s.program = cl.Program(s.emf.context, ksrc).build()

		# allocation
		s.fs = [s.emf.get_buffer(sf) for sf in s.str_fs]
		s.shifts = [0] + [s.rplist['vals'][0] for sf in s.str_fs[1:]]
		shape = list( s.rplist['shape'] )
		shape[0] *= s.f_size

		if s.dtype_values == np.ndarray:
			s.fhost = np.zeros(shape, dtype=s.emf.dtype)
			mflags = cl.mem_flags.READ_WRITE | cl.mem_flags.COPY_HOST_PTR
			s.fgpu = cl.Buffer(s.emf.context, mflags, hostbuf=s.fhost)

			if wait_event:
				s.set_fields = s.set_fields_spatial_evt
			else:
				s.set_fields = s.set_fields_spatial

		else:
			if wait_event:
				s.set_fields = s.set_fields_non_spatial_evt
			else:
				s.set_fields = s.set_fields_non_spatial

	
	def set_fields_spatial(s, values):
		assert values.dtype == s.fhost.dtype
		evt_write = cl.enqueue_write_buffer(s.emf.queue, s.fgpu, values, is_blocking=False)

		s.program.subdomain(s.emf.queue, (s.emf.gs,), (s.emf.ls,), *(s.emf.ns + [np.int32(0), s.fs[0], s.fgpu]), wait_for=[evt_write] )
		for f, shift in zip(s.fs, s.shifts)[1:]:		
			s.program.subdomain(s.emf.queue, (s.emf.gs,), (s.emf.ls,), *(s.emf.ns + [np.int32(shift), f, s.fgpu]))


	def set_fields_spatial_evt(s, values, evt):
		assert values.dtype == s.fhost.dtype
		evt_write = cl.enqueue_write_buffer(s.emf.queue, s.fgpu, values, is_blocking=False, wait_for=[evt])

		s.program.subdomain(s.emf.queue, (s.emf.gs,), (s.emf.ls,), *(s.emf.ns + [np.int32(0), s.fs[0], s.fgpu]), wait_for=[evt_write] )
		for f, shift in zip(s.fs, s.shifts)[1:]:		
			s.program.subdomain(s.emf.queue, (s.emf.gs,), (s.emf.ls,), *(s.emf.ns + [np.int32(shift), f, s.fgpu]))


	def set_fields_non_spatial(s, values):
		for f, shift in zip(s.fs, s.shifts):		
			s.program.subdomain(s.emf.queue, (s.emf.gs,), (s.emf.ls,), *(s.emf.ns + [np.int32(shift), f, s.emf.dtype(values)]) )

	
	def set_fields_non_spatial_evt(s, values, evt):
		s.program.subdomain(s.emf.queue, (s.emf.gs,), (s.emf.ls,), *(s.emf.ns + [np.int32(0), s.fs[0], s.emf.dtype(values)]), wait_for=[evt])
		for f, shift in zip(s.fs, s.shifts)[1:]:		
			s.program.subdomain(s.emf.queue, (s.emf.gs,), (s.emf.ls,), *(s.emf.ns + [np.int32(shift), f, s.emf.dtype(values)]) )
