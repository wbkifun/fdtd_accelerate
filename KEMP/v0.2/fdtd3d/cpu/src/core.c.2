#include <xmmintrin.h>
#include <omp.h>
#define LOADU _mm_loadu_ps	// not aligned to 16 bytes
#define LOAD _mm_load_ps	
#define STORE _mm_store_ps
#define ADD _mm_add_ps
#define SUB _mm_sub_ps
#define MUL _mm_mul_ps
#define SET _mm_set_ps1


void update_e(int nx, int ny, int nz, float *ex, float *ey, float *ez, float *hx, float *hy, float *hz ARGS_CE) {
	int idx;
	__m128 hx0, hy0, hz0, h1, h2, e, INIT_CE;

	OMP_SET_NUM_THREADS
	#pragma omp parallel for \
	shared(ex, ey, ez, hx, hy, hz, OMP_SHARED_CE) \
	private(hx0, hy0, hz0, h1, h2, e, idx OMP_PRIVATE_CE) \
	schedule(guided)
	for ( idx=0; idx < nx*ny*(nz-1); idx+=4 ) {
		hx0 = LOAD(hx+idx);
		hy0 = LOAD(hy+idx);
		hz0 = LOAD(hz+idx);

		e = LOAD(ex+idx);
		CEX
		h1 = LOAD(hz+idx+nz);
		h2 = LOADU(hy+idx+1);
		STORE(ex+idx, ADD(e,MUL(ce,SUB(SUB(h1,hz0),SUB(h2,hy0)))));

		if( idx < (nx-1)*ny*nz ) {
			e = LOAD(ey+idx);
			CEY
			h1 = LOADU(hx+idx+1);
			h2 = LOAD(hz+idx+ny*nz);
			STORE(ey+idx, ADD(e,MUL(ce,SUB(SUB(h1,hx0),SUB(h2,hz0)))));

			e = LOAD(ez+idx);
			CEZ
			h1 = LOADU(hy+idx+ny*nz);
			h2 = LOAD(hx+idx+nz);
			STORE(ez+idx, ADD(e,MUL(ce,SUB(SUB(h1,hy0),SUB(h2,hx0)))));
		}
	}
}



void update_h(int nx, int ny, int nz, float *ex, float *ey, float *ez, float *hx, float *hy, float *hz ARGS_CH) {
	int idx;
	__m128 ex0, ey0, ez0, e1, e2, h, INIT_CH;

	OMP_SET_NUM_THREADS
	#pragma omp parallel for \
	shared(ex, ey, ez, hx, hy, hz, OMP_SHARED_CH) \
	private(ex0, ey0, ez0, e1, e2, h, idx OMP_PRIVATE_CH) \
	schedule(guided)
	for ( idx=nz; idx < nx*ny*nz; idx+=4 ) {
		ex0 = LOAD(ex+idx);
		ey0 = LOAD(ey+idx);
		ez0 = LOAD(ez+idx);

		h = LOAD(hx+idx);
		CHX
		e1 = LOAD(ez+idx-nz);
		e2 = LOADU(ey+idx-1);
		STORE(hx+idx, SUB(h,MUL(ch,SUB(SUB(ez0,e1),SUB(ey0,e2)))));

		if( idx > ny*nz ) {
			h = LOAD(hy+idx);
			CHY
			e1 = LOADU(ex+idx-1);
			e2 = LOAD(ez+idx-ny*nz);
			STORE(hy+idx, SUB(h,MUL(ch,SUB(SUB(ex0,e1),SUB(ez0,e2)))));

			h = LOAD(hz+idx);
			CHZ
			e1 = LOADU(ey+idx-ny*nz);
			e2 = LOAD(ex+idx-nz);
			STORE(hz+idx, SUB(h,MUL(ch,SUB(SUB(ey0,e1),SUB(ex0,e2)))));
		}
	}
}
