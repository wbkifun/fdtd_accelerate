/*
 Author : Kim Ki-hwan (wbkifun@korea.ac.kr)
          Kim, KyoungHo (rain_woo@korea.ac.kr)

 Written date : 2009. 7. 2

 Copyright : GNU GPL
*/

#include <base.h>


static PyObject *update_x_e(PyObject *self, PyObject *args) {
	int Ncore, Nx, Ny, Nz, Npml, backward;
	PyArrayObject *Ey, *Ez;
	PyArrayObject *Hy, *Hz;
	PyArrayObject *CEy, *CEz;
	PyArrayObject *Psi1, *Psi2;
	PyArrayObject *Rcmb, *Rcma;

	if (!PyArg_ParseTuple(args, "iiiiiiOOOOOOOOOO",
				&Ncore, &Nx, &Ny, &Nz, &Npml, &backward,
				&Ey, &Ez, &Hy, &Hz, &CEy, &CEz,
			    &Psi1, &Psi2, &Rcmb, &Rcma ))
   	{ return NULL; }

	float *ey, *ez, *hy, *hz, *cey, *cez;
	float *psi1, *psi2, *rcmb, *rcma;

	ey = (float*)(Ey->data);
	ez = (float*)(Ez->data);
	hy = (float*)(Hy->data);
	hz = (float*)(Hz->data);
	cey = (float*)(CEy->data);
	cez = (float*)(CEz->data);
	psi1 = (float*)(Psi1->data);
	psi2 = (float*)(Psi2->data);
	rcmb = (float*)(Rcmb->data);
	rcma = (float*)(Rcma->data);

	int ipml, idx, pi, i, c1, c2;
	int Nyz = Ny*Nz;
	float rb, ra;

	for ( ipml=0; ipml<Npml; ipml++ ) {
		rb = rcmb[ipml+backward*Npml];
		ra = rcma[ipml+backward*Npml];
		c1 = ipml*Nyz;
		c2 = c1 + Nyz + Nz + backward*(Nx-Npml-2)*Nyz;

		for ( idx=0; idx<(Ny-1)*Nz; idx++ ) {
			pi = idx + c1;
			i = idx + c2;

			psi1[pi] = rb*psi1[pi] + ra*( hz[i+Nyz] - hz[i] );
			ey[i] -= cey[i]*psi1[pi];

			psi2[pi] = rb*psi2[pi] + ra*( hy[i+Nyz] - hy[i] );
			ez[i] += cez[i]*psi2[pi];
		}
	}
   	Py_INCREF(Py_None);
   	return Py_None;
}


static PyObject *update_x_h(PyObject *self, PyObject *args) {
	int Ncore, Nx, Ny, Nz, Npml, backward;
	PyArrayObject *Ey, *Ez;
	PyArrayObject *Hy, *Hz;
	PyArrayObject *Psi1, *Psi2;
	PyArrayObject *Rcmb, *Rcma;

	if (!PyArg_ParseTuple(args, "iiiiiiOOOOOOOO",
				&Ncore, &Nx, &Ny, &Nz, &Npml, &backward,
				&Ey, &Ez, &Hy, &Hz,
			    &Psi1, &Psi2, &Rcmb, &Rcma ))
   	{ return NULL; }

	float *ey, *ez, *hy, *hz;
	float *psi1, *psi2, *rcmb, *rcma;

	ey = (float*)(Ey->data);
	ez = (float*)(Ez->data);
	hy = (float*)(Hy->data);
	hz = (float*)(Hz->data);
	psi1 = (float*)(Psi1->data);
	psi2 = (float*)(Psi2->data);
	rcmb = (float*)(Rcmb->data);
	rcma = (float*)(Rcma->data);

	int ipml, idx, pi, i, c1, c2;
	int Nyz = Ny*Nz;
	float rb, ra;

	for ( ipml=0; ipml<Npml; ipml++ ) {
		rb = rcmb[ipml+backward*Npml];
		ra = rcma[ipml+backward*Npml];
		c1 = ipml*Nyz;
		c2 = c1 + Nyz + Nz + backward*(Nx-Npml-2)*Nyz;

		for ( idx=0; idx<(Ny-1)*Nz; idx++ ) {
			pi = idx + c1;
			i = idx + c2;

			psi1[pi] = rb*psi1[pi] + ra*( ez[i] - ez[i-Nyz] );
			hy[i] += 0.5*psi1[pi];

			psi2[pi] = rb*psi2[pi] + ra*( ey[i] - ey[i-Nyz] );
			hz[i] -= 0.5*psi2[pi];
		}
	}
   	Py_INCREF(Py_None);
   	return Py_None;
}



/*============================================================================
 * method table listing
 * module's initialization
============================================================================*/
static char update_x_e_doc[] = "";
static char update_x_h_doc[] = "";
static char module_doc[] = "";
static PyMethodDef cpml_non_kappa_methods[] = {
	{"update_x_e", update_x_e, METH_VARARGS, update_x_e_doc},
	{"update_x_h", update_x_h, METH_VARARGS, update_x_h_doc},
	{NULL, NULL, 0, NULL}
};
PyMODINIT_FUNC initcpml_non_kappa() {
	Py_InitModule3("cpml_non_kappa", cpml_non_kappa_methods, module_doc);
	import_array();
}


/*
__global__ void update_x_e( int Nx, int Ny, int Nz, float *Ex, float *Ey,float *Ez, float *Hx, float *Hy,float *Hz, float *CEx, float *CEy,float *CEz, float *psi1, float *psi2, int backward ) {
	int pidx = blockIdx.x*blockDim.x + threadIdx.x;
	int Nyz = Ny*Nz;
	int pi = pidx/Nyz + backward*(NPML+1);

	int idx = pidx + ( 1 + backward*(Nx-NPML-2) )*Nyz;
	int eidx = idx + Nyz;

	psi1[pidx] = rcmbE[pi]*psi1[pidx] + rcmaE[pi]*( Hz[idx+Nyz] - Hz[idx] );
	Ey[eidx] -= CEy[idx]*psi1[pidx];

	psi2[pidx] = rcmbE[pi]*psi2[pidx] + rcmaE[pi]*( Hy[idx+Nyz] - Hy[idx] );
	Ez[eidx] += CEz[idx]*psi2[pidx];
}


__global__ void update_x_h( int Nx, int Ny, int Nz, float *Ex, float *Ey,float *Ez, float *Hx, float *Hy,float *Hz, float *psi1, float *psi2, int backward ) {
	int pidx = blockIdx.x*blockDim.x + threadIdx.x;
	int Nyz = Ny*Nz;
	int pi = pidx/Nyz + 1 + backward*(NPML+1);

	int idx = pidx + ( 1 + backward*(Nx-NPML-1) )*Nyz;
	int eidx = idx + Nyz;

	psi1[pidx] = rcmbH[pi]*psi1[pidx] + rcmaH[pi]*( Ez[eidx] - Ez[eidx-Nyz] );
	Hy[idx] += 0.5*psi1[pidx];

	psi2[pidx] = rcmbH[pi]*psi2[pidx] + rcmaH[pi]*( Ey[eidx] - Ey[eidx-Nyz] );
	Hz[idx] -= 0.5*psi2[pidx];
}


__global__ void update_y_e( int Ny, int Nz, float *Ex, float *Ey,float *Ez, float *Hx, float *Hy,float *Hz, float *CEx, float *CEy,float *CEz, float *psi1, float *psi2, int backward ) {
	int pidx = blockIdx.x*blockDim.x + threadIdx.x;
	int i = pidx/(NPML*Nz);
	int pj = ( pidx/Nz )%NPML + backward*(NPML+1);

	int idx = pidx + ( 1 + i*(Ny-NPML) + backward*(Ny-NPML-2) )*Nz;
	int eidx = idx + Ny*Nz;

	psi1[pidx] = rcmbE[pj]*psi1[pidx] + rcmaE[pj]*( Hx[idx+Nz] - Hx[idx] );
	Ez[eidx] -= CEz[idx]*psi1[pidx];

	psi2[pidx] = rcmbE[pj]*psi2[pidx] + rcmaE[pj]*( Hz[idx+Nz] - Hz[idx] );
	Ex[eidx] += CEx[idx]*psi2[pidx];
}


__global__ void update_y_h( int Ny, int Nz, float *Ex, float *Ey,float *Ez, float *Hx, float *Hy,float *Hz, float *psi1, float *psi2, int backward ) {
	int pidx = blockIdx.x*blockDim.x + threadIdx.x;
	int i = pidx/(NPML*Nz);
	int pj = ( pidx/Nz )%NPML + 1 + backward*(NPML+1);

	int idx = pidx + ( 1 + i*(Ny-NPML) + backward*(Ny-NPML-1) )*Nz;
	int eidx = idx + Ny*Nz;

	psi1[pidx] = rcmbH[pj]*psi1[pidx] + rcmaH[pj]*( Ex[eidx] - Ex[eidx-Nz] );
	Hz[idx] += 0.5*psi1[pidx];

	psi2[pidx] = rcmbH[pj]*psi2[pidx] + rcmaH[pj]*( Ez[eidx] - Ez[eidx-Nz] );
	Hx[idx] -= 0.5*psi2[pidx];
}


__global__ void update_z_e( int Ny, int Nz, float *Ex, float *Ey,float *Ez, float *Hx, float *Hy,float *Hz, float *CEx, float *CEy,float *CEz, float *psi1, float *psi2, int backward ) {
	int tk = threadIdx.x;
	int pidx = blockIdx.x*blockDim.x + tk;
	int pk = pidx%NPMLp + backward*NPMLp;

	int idx = pidx + 1 + (pidx/NPMLp)*(Nz-NPMLp) + backward*(Nz-NPMLp-1);
	int eidx = idx + Ny*Nz;

	extern __shared__ float hs[];
	float* hx = (float*) hs;
	float* hy = (float*) &hx[blockDim.x+1];

	hx[tk] = Hx[idx];
	hy[tk] = Hy[idx];
	__syncthreads();

	psi1[pidx] = rcmbE[pk]*psi1[pidx] + rcmaE[pk]*( hy[tk+1] - hy[tk] );
	//psi1[pidx] = rcmbE[pk]*psi1[pidx] + rcmaE[pk]*( Hy[idx+1] - Hy[idx] );
	Ex[eidx] -= CEx[idx]*psi1[pidx];

	psi2[pidx] = rcmbE[pk]*psi2[pidx] + rcmaE[pk]*( hx[tk+1] - hx[tk] );
	//psi2[pidx] = rcmbE[pk]*psi2[pidx] + rcmaE[pk]*( Hx[idx+1] - Hx[idx] );
	Ey[eidx] += CEy[idx]*psi2[pidx];
}


__global__ void update_z_h( int Ny, int Nz, float *Ex, float *Ey,float *Ez, float *Hx, float *Hy,float *Hz, float *psi1, float *psi2, int backward ) {
	int tk = threadIdx.x;
	int pidx = blockIdx.x*blockDim.x + tk;
	int pk = pidx%NPMLp + backward*NPMLp;

	int idx = pidx + (pidx/NPMLp + backward)*(Nz-NPMLp);
	int eidx = idx + Ny*Nz;

	extern __shared__ float es[];
	float* ex = (float*) es;
	float* ey = (float*) &ex[blockDim.x+1];

	ex[tk+1] = Ex[eidx];
	ey[tk+1] = Ey[eidx];
	__syncthreads();

	psi1[pidx] = rcmbH[pk]*psi1[pidx] + rcmaH[pk]*( ey[tk+1] - ey[tk] );
	//psi1[pidx] = rcmbH[pk]*psi1[pidx] + rcmaH[pk]*( Ey[eidx] - Ey[eidx-1] );
	Hx[idx] += 0.5*psi1[pidx];

	psi2[pidx] = rcmbH[pk]*psi2[pidx] + rcmaH[pk]*( ex[tk+1] - ex[tk] );
	//psi2[pidx] = rcmbH[pk]*psi2[pidx] + rcmaH[pk]*( Ex[eidx] - Ex[eidx-1] );
	Hy[idx] -= 0.5*psi2[pidx];
}
*/
